{"version":3,"sources":["Card.js","CardList.js","SearchBar.js","robots.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","Math","random","CardList","displayRobots","map","robo","i","key","SearchBar","searchChange","type","placeholder","onChange","robots","username","App","onSearch","event","setState","searchField","target","value","state","filterRobots","filter","robot","toLowerCase","includes","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACI,yBAAKC,UAAY,uDACb,yBAAKC,IAAM,UAAUC,IAAG,+BAA4BH,EAAKI,KAAKC,SAAtC,cACxB,6BACI,4BAAKP,GACL,2BAAIC,MCaLO,EAlBE,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACf,OACI,iCACQA,EAAcC,IAAI,SAACC,EAAMC,GACrB,OACI,kBAAC,EAAD,CACIC,IAAOD,EACPV,GAAMS,EAAKT,GACXF,KAAQW,EAAKX,KACbC,MAASU,EAAKV,YCG3Ba,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,6BACI,2BACAZ,UAAY,mCACZa,KAAO,SACPC,YAAc,cACdC,SAAYH,MCTXI,EAAS,CAClB,CACEjB,GAAI,EACJF,KAAM,gBACNoB,SAAU,OACVnB,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,eACNoB,SAAU,YACVnB,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,mBACNoB,SAAU,WACVnB,MAAO,sBAET,CACEC,GAAI,EACJF,KAAM,mBACNoB,SAAU,WACVnB,MAAO,6BAET,CACEC,GAAI,EACJF,KAAM,mBACNoB,SAAU,SACVnB,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,uBACNoB,SAAU,mBACVnB,MAAO,2BAET,CACEC,GAAI,EACJF,KAAM,kBACNoB,SAAU,eACVnB,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,2BACNoB,SAAU,gBACVnB,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,kBACNoB,SAAU,WACVnB,MAAO,2BAET,CACEC,GAAI,GACJF,KAAM,qBACNoB,SAAU,iBACVnB,MAAO,2BC5BEoB,E,YAzBX,aAAe,IAAD,8BACV,+CAMJC,SAAW,SAACC,GACR,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SANzC,EAAKC,MAAQ,CACTH,YAAa,IAHP,E,sEAWJ,IAAD,OACCI,EAAeV,EAAOW,OAAO,SAACC,GAChC,OAAOA,EAAM/B,KAAKgC,cAAcC,SAAS,EAAKL,MAAMH,YAAYO,iBAEpE,OACI,yBAAK7B,UAAY,MACb,2CACA,kBAAC,EAAD,CAAWY,aAAgBmB,KAAKZ,WAChC,kBAAC,EAAD,CAAUb,cAAiBoB,S,GApBzBM,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACD,6BACI,kBAAC,EAAD,OAENC,SAASC,eAAe,SDsHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.ae9642dc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className = \"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt = 'Profile' src = {`https://robohash.org/${id + Math.random()}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({displayRobots}) => {\r\n    return (\r\n        <div> {\r\n                displayRobots.map((robo, i) => {\r\n                    return (\r\n                        <Card \r\n                            key = {i}\r\n                            id = {robo.id}\r\n                            name = {robo.name}\r\n                            email = {robo.email}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBar = ({searchChange}) => {\r\n    return (\r\n        <div>\r\n            <input\r\n            className = 'bg-lightest-blue b--green pa3 ba'\r\n            type = 'search' \r\n            placeholder = 'Search Bots' \r\n            onChange = {searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar;\r\n","export const robots = [\r\n    {\r\n      id: 1,\r\n      name: 'Leanne Graham',\r\n      username: 'Bret',\r\n      email: 'Sincere@april.biz'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Ervin Howell',\r\n      username: 'Antonette',\r\n      email: 'Shanna@melissa.tv'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Clementine Bauch',\r\n      username: 'Samantha',\r\n      email: 'Nathan@yesenia.net'\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Patricia Lebsack',\r\n      username: 'Karianne',\r\n      email: 'Julianne.OConner@kory.org'\r\n    },\r\n    {\r\n      id: 5,\r\n      name: 'Chelsey Dietrich',\r\n      username: 'Kamren',\r\n      email: 'Lucio_Hettinger@annie.ca'\r\n    },\r\n    {\r\n      id: 6,\r\n      name: 'Mrs. Dennis Schulist',\r\n      username: 'Leopoldo_Corkery',\r\n      email: 'Karley_Dach@jasper.info'\r\n    },\r\n    {\r\n      id: 7,\r\n      name: 'Kurtis Weissnat',\r\n      username: 'Elwyn.Skiles',\r\n      email: 'Telly.Hoeger@billy.biz'\r\n    },\r\n    {\r\n      id: 8,\r\n      name: 'Nicholas Runolfsdottir V',\r\n      username: 'Maxime_Nienow',\r\n      email: 'Sherwood@rosamond.me'\r\n    },\r\n    {\r\n      id: 9,\r\n      name: 'Glenna Reichert',\r\n      username: 'Delphine',\r\n      email: 'Chaim_McDermott@dana.io'\r\n    },\r\n    {\r\n      id: 10,\r\n      name: 'Clementina DuBuque',\r\n      username: 'Moriah.Stanton',\r\n      email: 'Rey.Padberg@karina.biz'\r\n    }\r\n  ];\r\n  ","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBar from './SearchBar'\r\nimport { robots }from \"./robots\";\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n    onSearch = (event) => {\r\n        this.setState({searchField: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        const filterRobots = robots.filter((robot) => {\r\n            return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n        })\r\n        return (\r\n            <div className = 'tc'>\r\n                <h1>RoboFriends</h1>\r\n                <SearchBar searchChange = {this.onSearch}/>\r\n                <CardList displayRobots = {filterRobots}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n        <div>\n            <App />\n        </div>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}